// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id               String             @id @default(uuid())
    email            String             @unique @db.VarChar(100)
    password         String             @db.VarChar(100)
    role             RoleEnum           @default(Volunteer)
    lastConnexion    DateTime           @default(now())
    refreshToken     String?            @db.VarChar(255) //  @db.Text
    status           UserStatusEnum     @default(Active)
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    userTaskEvent    UserTaskEvent[]
    userNotification UserNotification[]
    userBadge        UserBadge[]
    profile          Profile?
    task             Task[]
}

model Profile {
    userId     String   @id @unique
    firstname  String   @db.VarChar(50)
    lastname   String   @db.VarChar(50)
    nickname   String   @db.VarChar(20)
    avatarPath String?  @db.VarChar(255)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Task {
    id             Int             @id @default(autoincrement())
    name           String          @unique @db.VarChar(30)
    description    String          @db.Text()
    skillName      String?         @db.VarChar(30)
    skillBadgePath String?         @db.VarChar(255)
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    taskEvent      TaskEvent[]
    userTaskEvent  UserTaskEvent[]
    userBadge      UserBadge[]
    userId         String?
    user           User?           @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: SetNull)

    @@index([userId])
}

model Event {
    id            Int             @id @default(autoincrement())
    title         String          @unique @db.VarChar(30)
    description   String          @db.Text()
    adress        String          @db.VarChar(100)
    startDate     DateTime        @db.DateTime
    endDate       DateTime        @db.DateTime
    status        EventStatusEnum @default(Incomplete)
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    taskEvent     TaskEvent[]
    userTaskEvent UserTaskEvent[]
}

model Notification {
    id               Int                @id @default(autoincrement())
    content          String             @db.VarChar(100)
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    userNotification UserNotification[]
}
model TaskEvent {
    taskId          Int
    eventId         Int
    volunteerNumber Int      @default(1) @db.SmallInt()
    needValidation  Boolean  @default(false)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    task            Task     @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    event           Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([taskId, eventId])
}
model UserTaskEvent {
    userId    String
    taskId    Int
    eventId   Int
    status    UserTaskEventStatusEnum @default(Validated)
    createdAt DateTime                @default(now())
    updatedAt DateTime                @updatedAt
    user      User                    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    task      Task                    @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    event     Event                   @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([userId, taskId, eventId])
}
model UserNotification {
    id             Int                        @id @default(autoincrement())
    userId         String?
    notificationId Int?
    status         UserNotificationStatusEnum @default(Notread)
    createdAt      DateTime                   @default(now())
    updatedAt      DateTime                   @updatedAt
    user           User?                      @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: SetNull)
    notification   Notification?              @relation(fields: [notificationId], references: [id], onDelete: SetNull, onUpdate: SetNull)
}
model UserBadge {
    userId String
    taskId Int
    level  Int    @default(1) @db.TinyInt()
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([userId, taskId])
}
enum RoleEnum {
    Volunteer
    Admin
    SuperAdmin
}

enum EventStatusEnum {
    Complete 
    Incomplete 
}
enum UserTaskEventStatusEnum {
    Waiting 
    Validated 
    Refused 
}
enum UserNotificationStatusEnum {
    Read
    Notread 
}
enum UserStatusEnum {
    Inactive
    Active
    Banned
}
